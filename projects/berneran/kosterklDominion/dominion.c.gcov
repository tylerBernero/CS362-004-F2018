        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:52
        -:    0:Programs:52
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 139500 returned 100% blocks executed 100%
   139500:    8:int compare(const void* a, const void* b) {
   139500:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 1% (fallthrough)
branch  1 taken 99%
       36:   10:    return 1;
   139464:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
    37194:   12:    return -1;
   102270:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 4644 returned 100% blocks executed 88%
     4644:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
     4644:   44:  SelectStream(1);
call    0 returned 100%
     4644:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
     4644:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
     4644:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
    51084:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
   510840:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
   464400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
     4644:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
     4644:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
     4644:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
     4644:   89:      state->supplyCount[estate] = 8;
     4644:   90:      state->supplyCount[duchy] = 8;
     4644:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
     4644:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
     4644:  102:  state->supplyCount[silver] = 40;
     4644:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
    97524:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
   766260:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
   719820:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
    46440:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 10% (fallthrough)
branch  3 taken 90%
        -:  114:		{
     9288:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     4644:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
    41796:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
    46440:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
   673380:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
    13932:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
     9288:  140:      state->deckCount[i] = 0;
    37152:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
    27864:  143:	  state->deck[i][j] = estate;
    27864:  144:	  state->deckCount[i]++;
        -:  145:	}
    74304:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
    65016:  148:	  state->deck[i][j] = copper;
    65016:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
    13932:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
     9288:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
    13932:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
     9288:  166:      state->handCount[i] = 0;
     9288:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
   130032:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
   125388:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
     4644:  182:  state->outpostPlayed = 0;
     4644:  183:  state->phase = 0;
     4644:  184:  state->numActions = 1;
     4644:  185:  state->numBuys = 1;
     4644:  186:  state->playedCardCount = 0;
     4644:  187:  state->whoseTurn = 0;
     4644:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
    27864:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
    23220:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
     4644:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
     4644:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 24354 returned 100% blocks executed 100%
    24354:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
    24354:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
    24354:  209:  if (state->deckCount[player] < 1)
branch  0 taken 62% (fallthrough)
branch  1 taken 38%
    15060:  210:    return -1;
     9294:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
   111528:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    92940:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
    92940:  216:    newDeck[newDeckPos] = state->deck[player][card];
    92940:  217:    newDeckPos++;
   305804:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
   212864:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
    92940:  221:    state->deckCount[player]--;
        -:  222:  }
   102234:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
    92940:  224:    state->deck[player][i] = newDeck[i];
    92940:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
     9294:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 30 returned 100% blocks executed 100%
       30:  311:int numHandCards(struct gameState *state) {
       30:  312:  return state->handCount[ whoseTurn(state) ];
call    0 returned 100%
        -:  313:}
        -:  314:
function handCard called 0 returned 0% blocks executed 0%
    #####:  315:int handCard(int handPos, struct gameState *state) {
    #####:  316:  int currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 0 returned 0% blocks executed 0%
    #####:  320:int supplyCount(int card, struct gameState *state) {
    #####:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 10668 returned 100% blocks executed 100%
    10668:  346:int whoseTurn(struct gameState *state) {
    10668:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 18 returned 100% blocks executed 27%
       18:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       18:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:  396:    {
       18:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
    #####:  401:  j = 0;
    #####:  402:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  403:    {
    #####:  404:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  405:	{
    #####:  406:	  j++;
        -:  407:	}
        -:  408:    }
    #####:  409:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  410:    {
    #####:  411:      return 1;
        -:  412:    }
        -:  413:
    #####:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 54330 returned 100% blocks executed 100%
    54330:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
    54330:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    15126:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 1%
branch  1 taken 99% (fallthrough)
       60:  534:      state->deck[player][i] = state->discard[player][i];
       60:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    15066:  538:    state->deckCount[player] = state->discardCount[player];
    15066:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    15066:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    15066:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    15066:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    15066:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    15066:  559:    if (deckCounter == 0)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
    15060:  560:      return -1;
        -:  561:
        6:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        6:  563:    state->deckCount[player]--;
        6:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
    39264:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
    39264:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
    39264:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
    39264:  576:    state->deckCount[player]--;
    39264:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
    39270:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 0 returned 0% blocks executed 0%
    #####:  583:int getCost(int cardNumber)
        -:  584:{
    #####:  585:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
    #####:  596:      return 0;
        -:  597:    case silver:
    #####:  598:      return 3;
        -:  599:    case gold:
    #####:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
    #####:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 10638 returned 100% blocks executed 6%
    10638:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int index;
    10638:  652:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    10638:  653:  int nextPlayer = currentPlayer + 1;
        -:  654:
    10638:  655:  int tributeRevealedCards[2] = {-1, -1};
        -:  656:  int temphand[MAX_HAND];// moved above the if statement
    10638:  657:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  658:    nextPlayer = 0;
        -:  659:  }
        -:  660:  
        -:  661:	
        -:  662:  //uses switch to select card and perform actions
    10638:  663:  switch( card ) 
branch  0 taken 29%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 71%
branch  7 taken 1%
branch  8 taken 0%
branch  9 taken 1%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  664:    {
        -:  665:    case adventurer:
        -:  666:      // play adventurer card
     3036:  667:      playAdventurer(currentPlayer, temphand, state);
call    0 returned 100%
     3036:  668:      return 0;
        -:  669:			
        -:  670:    case council_room:   
        -:  671:      // play council room card
    #####:  672:      playCouncilRoom(currentPlayer, handPos, state);
call    0 never executed
    #####:  673:      return 0;
        -:  674:			
        -:  675:    case feast:
        -:  676:      // play the feast card
    #####:  677:      playFeast(currentPlayer, choice1, temphand, state);
call    0 never executed
    #####:  678:      return 0;
        -:  679:			
        -:  680:    case gardens:
    #####:  681:      return -1;
        -:  682:			
        -:  683:    case mine:
    #####:  684:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  685:
    #####:  686:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  687:	{
    #####:  688:	  return -1;
        -:  689:	}
        -:  690:		
    #####:  691:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  692:	{
    #####:  693:	  return -1;
        -:  694:	}
        -:  695:
    #####:  696:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  697:	{
    #####:  698:	  return -1;
        -:  699:	}
        -:  700:
    #####:  701:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  702:
        -:  703:      //discard card from hand
    #####:  704:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  705:
        -:  706:      //discard trashed card
    #####:  707:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  708:	{
    #####:  709:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  710:	    {
    #####:  711:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  712:	      break;
        -:  713:	    }
        -:  714:	}
        -:  715:			
    #####:  716:      return 0;
        -:  717:			
        -:  718:    case remodel:
    #####:  719:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  720:
    #####:  721:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  722:	{
    #####:  723:	  return -1;
        -:  724:	}
        -:  725:
    #####:  726:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  727:
        -:  728:      //discard card from hand
    #####:  729:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  730:
        -:  731:      //discard trashed card
    #####:  732:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  733:	{
    #####:  734:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  735:	    {
    #####:  736:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  737:	      break;
        -:  738:	    }
        -:  739:	}
        -:  740:
        -:  741:
    #####:  742:      return 0;
        -:  743:		
        -:  744:    case smithy:
        -:  745:      // play the Smithy card
     7530:  746:      playSmithy(currentPlayer, handPos, state);
call    0 returned 100%
     7530:  747:      return 0;
        -:  748:		
        -:  749:    case village:
        -:  750:      // play the village card
       36:  751:      playVillage(currentPlayer, handPos, state);
call    0 returned 100%
       36:  752:      return 0;
        -:  753:		
        -:  754:    case baron:
    #####:  755:      state->numBuys++;//Increase buys by 1!
    #####:  756:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  757:	int p = 0;//Iterator for hand!
    #####:  758:	int card_not_discarded = 1;//Flag for discard set!
    #####:  759:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  760:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  761:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  762:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  763:	    state->discardCount[currentPlayer]++;
    #####:  764:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  765:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  766:	    }
    #####:  767:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  768:	    state->handCount[currentPlayer]--;
    #####:  769:	    card_not_discarded = 0;//Exit the loop
        -:  770:	  }
    #####:  771:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  772:	    if(DEBUG) {
        -:  773:	      printf("No estate cards in your hand, invalid choice\n");
        -:  774:	      printf("Must gain an estate if there are any\n");
        -:  775:	    }
    #####:  776:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  777:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  778:	      state->supplyCount[estate]--;//Decrement estates
    #####:  779:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  780:		isGameOver(state);
call    0 never executed
        -:  781:	      }
        -:  782:	    }
    #####:  783:	    card_not_discarded = 0;//Exit the loop
        -:  784:	  }
        -:  785:			    
        -:  786:	  else{
    #####:  787:	    p++;//Next card
        -:  788:	  }
        -:  789:	}
        -:  790:      }
        -:  791:			    
        -:  792:      else{
    #####:  793:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  794:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  795:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  796:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  797:	    isGameOver(state);
call    0 never executed
        -:  798:	  }
        -:  799:	}
        -:  800:      }
        -:  801:	    
        -:  802:      
    #####:  803:      return 0;
        -:  804:		
        -:  805:    case great_hall:
        -:  806:      //+1 Card
       36:  807:      drawCard(currentPlayer, state);
call    0 returned 100%
        -:  808:			
        -:  809:      //+1 Actions
       36:  810:      state->numActions++;
        -:  811:			
        -:  812:      //discard card from hand
       36:  813:      discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       36:  814:      return 0;
        -:  815:		
        -:  816:    case minion:
        -:  817:      //+1 action
    #####:  818:      state->numActions++;
        -:  819:			
        -:  820:      //discard card from hand
    #####:  821:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  822:			
    #####:  823:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  824:	{
    #####:  825:	  state->coins = state->coins + 2;
        -:  826:	}
        -:  827:			
    #####:  828:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  829:	{
        -:  830:	  //discard hand
    #####:  831:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  832:	    {
    #####:  833:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  834:	    }
        -:  835:				
        -:  836:	  //draw 4
    #####:  837:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  838:	    {
    #####:  839:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  840:	    }
        -:  841:				
        -:  842:	  //other players discard hand and redraw if hand size > 4
    #####:  843:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  844:	    {
    #####:  845:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  846:		{
    #####:  847:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  848:		    {
        -:  849:		      //discard hand
    #####:  850:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  851:			{
    #####:  852:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  853:			}
        -:  854:							
        -:  855:		      //draw 4
    #####:  856:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  857:			{
    #####:  858:			  drawCard(i, state);
call    0 never executed
        -:  859:			}
        -:  860:		    }
        -:  861:		}
        -:  862:	    }
        -:  863:				
        -:  864:	}
    #####:  865:      return 0;
        -:  866:		
        -:  867:    case steward:
    #####:  868:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  869:	{
        -:  870:	  //+2 cards
    #####:  871:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  872:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  873:	}
    #####:  874:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  875:	{
        -:  876:	  //+2 coins
    #####:  877:	  state->coins = state->coins + 2;
        -:  878:	}
        -:  879:      else
        -:  880:	{
        -:  881:	  //trash 2 cards in hand
    #####:  882:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  883:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  884:	}
        -:  885:			
        -:  886:      //discard card from hand
    #####:  887:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  888:      return 0;
        -:  889:		
        -:  890:    case tribute:
    #####:  891:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  892:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  893:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  894:	  state->deckCount[nextPlayer]--;
        -:  895:	}
    #####:  896:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  897:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  898:	  state->discardCount[nextPlayer]--;
        -:  899:	}
        -:  900:	else{
        -:  901:	  //No Card to Reveal
        -:  902:	  if (DEBUG){
        -:  903:	    printf("No cards to reveal\n");
        -:  904:	  }
        -:  905:	}
        -:  906:      }
        -:  907:	    
        -:  908:      else{
    #####:  909:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  910:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  911:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  912:	    state->deckCount[nextPlayer]++;
    #####:  913:	    state->discard[nextPlayer][i] = -1;
    #####:  914:	    state->discardCount[nextPlayer]--;
        -:  915:	  }
        -:  916:			    
    #####:  917:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  918:	} 
    #####:  919:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  920:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  921:	state->deckCount[nextPlayer]--;
    #####:  922:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:	state->deckCount[nextPlayer]--;
        -:  925:      }    
        -:  926:		       
    #####:  927:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  928:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  929:	state->playedCardCount++;
    #####:  930:	tributeRevealedCards[1] = -1;
        -:  931:      }
        -:  932:
    #####:  933:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  934:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  935:	  state->coins += 2;
        -:  936:	}
        -:  937:		    
    #####:  938:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  939:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  940:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  941:	}
        -:  942:	else{//Action Card
    #####:  943:	  state->numActions = state->numActions + 2;
        -:  944:	}
        -:  945:      }
        -:  946:	    
    #####:  947:      return 0;
        -:  948:		
        -:  949:    case ambassador:
    #####:  950:      j = 0;		//used to check if player has enough cards to discard
        -:  951:
    #####:  952:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  953:	{
    #####:  954:	  return -1;				
        -:  955:	}
        -:  956:
    #####:  957:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  958:	{
    #####:  959:	  return -1;
        -:  960:	}
        -:  961:
    #####:  962:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  963:	{
    #####:  964:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  965:	    {
    #####:  966:	      j++;
        -:  967:	    }
        -:  968:	}
    #####:  969:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  970:	{
    #####:  971:	  return -1;				
        -:  972:	}
        -:  973:
        -:  974:      if (DEBUG) 
        -:  975:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  976:
        -:  977:      //increase supply count for choosen card by amount being discarded
    #####:  978:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  979:			
        -:  980:      //each other player gains a copy of revealed card
    #####:  981:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  982:	{
    #####:  983:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  984:	    {
    #####:  985:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  986:	    }
        -:  987:	}
        -:  988:
        -:  989:      //discard played card from hand
    #####:  990:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  991:
        -:  992:      //trash copies of cards returned to supply
    #####:  993:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  994:	{
    #####:  995:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  996:	    {
    #####:  997:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  998:		{
    #####:  999:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1000:		  break;
        -: 1001:		}
        -: 1002:	    }
        -: 1003:	}			
        -: 1004:
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case cutpurse:
        -: 1008:
    #####: 1009:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1010:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1011:	{
    #####: 1012:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1013:	    {
    #####: 1014:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1015:		{
    #####: 1016:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1017:		    {
    #####: 1018:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1019:		      break;
        -: 1020:		    }
    #####: 1021:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1022:		    {
    #####: 1023:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1024:			{
        -: 1025:			  if (DEBUG)
        -: 1026:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1027:			}	
    #####: 1028:		      break;
        -: 1029:		    }		
        -: 1030:		}
        -: 1031:					
        -: 1032:	    }
        -: 1033:				
        -: 1034:	}				
        -: 1035:
        -: 1036:      //discard played card from hand
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1038:
    #####: 1039:      return 0;
        -: 1040:
        -: 1041:		
        -: 1042:    case embargo: 
        -: 1043:      //+2 Coins
    #####: 1044:      state->coins = state->coins + 2;
        -: 1045:			
        -: 1046:      //see if selected pile is in play
    #####: 1047:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1048:	{
    #####: 1049:	  return -1;
        -: 1050:	}
        -: 1051:			
        -: 1052:      //add embargo token to selected supply pile
    #####: 1053:      state->embargoTokens[choice1]++;
        -: 1054:			
        -: 1055:      //trash card
    #####: 1056:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1057:      return 0;
        -: 1058:		
        -: 1059:    case outpost:
        -: 1060:      //set outpost flag
    #####: 1061:      state->outpostPlayed++;
        -: 1062:			
        -: 1063:      //discard card
    #####: 1064:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1065:      return 0;
        -: 1066:		
        -: 1067:    case salvager:
        -: 1068:      //+1 buy
    #####: 1069:      state->numBuys++;
        -: 1070:			
    #####: 1071:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1072:	{
        -: 1073:	  //gain coins equal to trashed card
    #####: 1074:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1075:	  //trash card
    #####: 1076:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1077:	}
        -: 1078:			
        -: 1079:      //discard card
    #####: 1080:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1081:      return 0;
        -: 1082:		
        -: 1083:    case sea_hag:
    #####: 1084:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1085:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1086:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1087:	  state->discardCount[i]++;
    #####: 1088:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1089:	}
        -: 1090:      }
    #####: 1091:      return 0;
        -: 1092:		
        -: 1093:    case treasure_map:
        -: 1094:      //search hand for another treasure_map
    #####: 1095:      index = -1;
    #####: 1096:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1097:	{
    #####: 1098:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1099:	    {
    #####: 1100:	      index = i;
    #####: 1101:	      break;
        -: 1102:	    }
        -: 1103:	}
    #####: 1104:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
        -: 1106:	  //trash both treasure cards
    #####: 1107:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1108:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1109:
        -: 1110:	  //gain 4 Gold cards
    #####: 1111:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1112:	    {
    #####: 1113:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1114:	    }
        -: 1115:				
        -: 1116:	  //return success
    #####: 1117:	  return 1;
        -: 1118:	}
        -: 1119:			
        -: 1120:      //no second treasure_map found in hand
    #####: 1121:      return -1;
        -: 1122:    }
        -: 1123:	
    #####: 1124:  return -1;
        -: 1125:}
        -: 1126:
function discardCard called 7602 returned 100% blocks executed 78%
     7602: 1127:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1128:{
        -: 1129:	
        -: 1130:  //if card is not trashed, added to Played pile 
     7602: 1131:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1132:    {
        -: 1133:      //add card to played pile
     7602: 1134:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
     7602: 1135:      state->playedCardCount++;
        -: 1136:    }
        -: 1137:	
        -: 1138:  //set played card to -1
     7602: 1139:  state->hand[currentPlayer][handPos] = -1;
        -: 1140:	
        -: 1141:  //remove card from player's hand
     7602: 1142:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1143:    {
        -: 1144:      //reduce number of cards in hand
    #####: 1145:      state->handCount[currentPlayer]--;
        -: 1146:    }
     7602: 1147:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1148:    {
        -: 1149:      //reduce number of cards in hand
    #####: 1150:      state->handCount[currentPlayer]--;
        -: 1151:    }
        -: 1152:  else 	
        -: 1153:    {
        -: 1154:      //replace discarded card with last card in hand
     7602: 1155:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1156:      //set last card to -1
     7602: 1157:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1158:      //reduce number of cards in hand
     7602: 1159:      state->handCount[currentPlayer]--;
        -: 1160:    }
        -: 1161:	
     7602: 1162:  return 0;
        -: 1163:}
        -: 1164:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1165:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1166:{
        -: 1167:  //Note: supplyPos is enum of choosen card
        -: 1168:	
        -: 1169:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1170:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1171:    {
    #####: 1172:      return -1;
        -: 1173:    }
        -: 1174:	
        -: 1175:  //added card for [whoseTurn] current player:
        -: 1176:  // toFlag = 0 : add to discard
        -: 1177:  // toFlag = 1 : add to deck
        -: 1178:  // toFlag = 2 : add to hand
        -: 1179:
    #####: 1180:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1181:    {
    #####: 1182:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1183:      state->deckCount[player]++;
        -: 1184:    }
    #####: 1185:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1186:    {
    #####: 1187:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1188:      state->handCount[player]++;
        -: 1189:    }
        -: 1190:  else
        -: 1191:    {
    #####: 1192:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1193:      state->discardCount[player]++;
        -: 1194:    }
        -: 1195:	
        -: 1196:  //decrease number in supply pile
    #####: 1197:  state->supplyCount[supplyPos]--;
        -: 1198:	 
    #####: 1199:  return 0;
        -: 1200:}
        -: 1201:
function updateCoins called 4644 returned 100% blocks executed 82%
     4644: 1202:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1203:{
        -: 1204:  int i;
        -: 1205:	
        -: 1206:  //reset coin count
     4644: 1207:  state->coins = 0;
        -: 1208:
        -: 1209:  //add coins for each Treasure card in player's hand
    27864: 1210:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1211:    {
    23220: 1212:      if (state->hand[player][i] == copper)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -: 1213:	{
    16403: 1214:	  state->coins += 1;
        -: 1215:	}
     6817: 1216:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1217:	{
    #####: 1218:	  state->coins += 2;
        -: 1219:	}
     6817: 1220:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1221:	{
    #####: 1222:	  state->coins += 3;
        -: 1223:	}	
        -: 1224:    }	
        -: 1225:
        -: 1226:  //add bonus
     4644: 1227:  state->coins += bonus;
        -: 1228:
     4644: 1229:  return 0;
        -: 1230:}
        -: 1231:
        -: 1232:// ******************************************** ADD FUNCTIONS HERE ************************************************
        -: 1233:
        -: 1234:/*********************************************************
        -: 1235: * Name: playSmithy
        -: 1236: * Description: plays the smithy card
        -: 1237: * Operations: draws 3 cards, discard smithy from hand
        -: 1238: * Input parameters: current player (int), hand position of smith (int),
        -: 1239: *                   game state struct pointer
        -: 1240: * Output: returns 0
        -: 1241:*********************************************************/
function playSmithy called 7530 returned 100% blocks executed 100%
     7530: 1242:int playSmithy(int currentPlayer, int handPos, struct gameState *state)
        -: 1243:{
        -: 1244:  //draw 3 cards
     7530: 1245:  int i = 0;
    15060: 1246:  for (i = 0; i <= 3; i++)  //buggy  // changed this to i <= 3 from i < 3.  This will cause smithy to draw 4 cards instead of 3.  BUG 1
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
    30120: 1247:  for (i = 0; i < 3; i++)  //fixed 
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -: 1248:	{
    22590: 1249:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1250:	}
        -: 1251:			
        -: 1252:  //discard card from hand
     7530: 1253:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1254:  
     7530: 1255:  return 0;
        -: 1256:}
        -: 1257:
        -: 1258:
        -: 1259:/*********************************************************
        -: 1260: * Name: playAdventurer
        -: 1261: * Description: plays the adventurer card
        -: 1262: * Operations: draw cards until revealing 2 treasure cards and adding them to the players hand,
        -: 1263: *             then discard the non-treasure cards the player drew
        -: 1264: * Input parameters: current player (int), temphand (int array),
        -: 1265: *                   game state struct pointer
        -: 1266: * Output: returns 0
        -: 1267:*********************************************************/
function playAdventurer called 3036 returned 100% blocks executed 93%
     3036: 1268:int playAdventurer(int currentPlayer,  int temphand[], struct gameState *state)
        -: 1269:{
        -: 1270:  // initialize our drawn treasure and card drawn vars
     3036: 1271:  int drawntreasure = 0;
     3036: 1272:  int cardDrawn = 0;
        -: 1273:  
        -: 1274:  // temp hand counter
     3036: 1275:  int z = 0;
        -: 1276:  
        -: 1277:  // continue to draw new cards until 2 treasure cards have been drawn
    14502: 1278:  while(drawntreasure<2)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -: 1279:  {
        -: 1280:    //if the deck is empty we need to shuffle discard and add to deck
     8430: 1281:	  if (state->deckCount[currentPlayer] <1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1282:	  {
    #####: 1283:	    shuffle(currentPlayer, state);
call    0 never executed
        -: 1284:	  }
        -: 1285:	  
        -: 1286:	  // draw a card
     8430: 1287:	  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1288:	  
        -: 1289:	  // read the card drawn
     8430: 1290:	  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1291:	  
        -: 1292:	  
     8430: 1293:	  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 28% (fallthrough)
branch  1 taken 72%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
     6072: 1294:	    drawntreasure++;
        -: 1295:	  else
        -: 1296:	  {
     2358: 1297:	    temphand[z]=cardDrawn;
     2358: 1298:	    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
     2358: 1299:	    z++;
        -: 1300:	  }
        -: 1301:  }
        -: 1302:      
        -: 1303:  //while(z-1 > 1)  //buggy    // introduced bug here with discarding cards  Original: z-1 >= 0, so with z-1 > 1, this never drops to 0 to discard all the cards  BUG 2
     8430: 1304:  while(z-1 >= 0) //fixed
branch  0 taken 44%
branch  1 taken 56% (fallthrough)
        -: 1305:  {
     2358: 1306:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
     2358: 1307:	  z = z - 1;
        -: 1308:  }
        -: 1309:  
     3036: 1310:  return 0;
        -: 1311:}
        -: 1312:
        -: 1313:
        -: 1314:/*********************************************************
        -: 1315: * Name: playCouncilRoom
        -: 1316: * Description: plays the council room card
        -: 1317: * Operations: player draws 4 cards, increases their buy ability by 1, and every OTHER player draws 1 card
        -: 1318: * Input parameters: current player (int), hand position (int),
        -: 1319: *                   game state struct pointer
        -: 1320: * Output: returns 0
        -: 1321:*********************************************************/
function playCouncilRoom called 0 returned 0% blocks executed 0%
    #####: 1322:int playCouncilRoom(int currentPlayer, int handPos, struct gameState *state)
        -: 1323:{
    #####: 1324:  int i = 0;
        -: 1325:    
        -: 1326:  // draw 4 cards
    #####: 1327:  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1328:	{
    #####: 1329:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1330:	}
        -: 1331:			
        -: 1332:  //+1 Buy
    #####: 1333:  state->numBuys++;
        -: 1334:	
        -: 1335:  //Each other player draws a card
    #####: 1336:  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1337:	{
    #####: 1338:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -: 1339:    {
    #####: 1340:	    drawCard(i, state);
call    0 never executed
        -: 1341:	  }
        -: 1342:	}
        -: 1343:			
        -: 1344:  //put played card in played card pile
    #####: 1345:  discardCard(handPos, currentPlayer, state, 1); // changed the trashed flag to 1. since card is "trashed" it doesn't get added to the played pile in the discardCard function BUG 3
call    0 never executed
        -: 1346:                                                 // one interesting note I want to mention here: there doesn't seem to be a remove card from play function. this trash flag doesn't seem to do a whole lot
    #####: 1347:  return 0;
        -: 1348:}
        -: 1349:
        -: 1350:/*********************************************************
        -: 1351: * Name: playVillage
        -: 1352: * Description: plays the Village card
        -: 1353: * Operations: player draws 1 card and adds 2 actions to their number of actions allowed to be performed
        -: 1354: * Input parameters: current player (int), hand position (int),
        -: 1355: *                   game state struct pointer
        -: 1356: * Output: returns 0
        -: 1357:*********************************************************/
function playVillage called 36 returned 100% blocks executed 100%
       36: 1358:int playVillage(int currentPlayer, int handPos, struct gameState *state)
        -: 1359:{
        -: 1360:  //+1 Card
       36: 1361:  drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1362:  
        -: 1363:  //+2 Actions
       36: 1364:  state->numActions = state->numActions + 2;
        -: 1365:  
        -: 1366:  //discard played card from hand
       36: 1367:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1368:  
       36: 1369:  return 0;
        -: 1370:}
        -: 1371:
        -: 1372:/*********************************************************
        -: 1373: * Name: playFeast
        -: 1374: * Description: plays the Feast card
        -: 1375: * Operations: Feast card goes to trash, player gains one card costing up to 5 treasure and it is added to the discard pile
        -: 1376: * Input parameters: current player (int), choice1 (int), temphand (int array)
        -: 1377: *                   game state struct pointer
        -: 1378: * Output: returns 0
        -: 1379:*********************************************************/
function playFeast called 0 returned 0% blocks executed 0%
    #####: 1380:int playFeast(int currentPlayer, int choice1, int temphand[], struct gameState *state)
        -: 1381:{
        -: 1382:  //gain card with cost up to 5 and back up the player's hand
    #####: 1383:  int i = 0;
    #####: 1384:  for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1385:  {
    #####: 1386:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1387:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1388:  }
        -: 1389:  
        -: 1390:  // update player's buy coins to 5
    #####: 1391:  updateCoins(currentPlayer, state, 5);
call    0 never executed
        -: 1392:  
    #####: 1393:  int x = 1;
    #####: 1394:  while( x < 1)     // changed from == to <.  Now, you can play feast and will never gain a card.  BUG 4
branch  0 never executed
branch  1 never executed
        -: 1395:  {//Buy one card
    #####: 1396:    if (supplyCount(choice1, state) <= 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1397:    {
        -: 1398:      if (DEBUG)
        -: 1399:        printf("None of that card left, sorry!\n");
        -: 1400:      
        -: 1401:      if (DEBUG)
        -: 1402:      {
        -: 1403:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1404:      }
        -: 1405:    }
    #####: 1406:    else if (state->coins < getCost(choice1))
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1407:    {
    #####: 1408:      printf("That card is too expensive!\n");
call    0 never executed
        -: 1409:
        -: 1410:      if (DEBUG)
        -: 1411:      {
        -: 1412:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1413:      }
        -: 1414:    }
        -: 1415:    else
        -: 1416:    {
        -: 1417:      if (DEBUG)
        -: 1418:      {
        -: 1419:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1420:      }
        -: 1421:
    #####: 1422:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####: 1423:      x = 0;//No more buying cards
        -: 1424:
        -: 1425:      if (DEBUG)
        -: 1426:      {
        -: 1427:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1428:      }
        -: 1429:    }
        -: 1430:  }     
        -: 1431:
        -: 1432:  //Reset Hand
    #####: 1433:  for (i = 0; i <= state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1434:  {
    #####: 1435:	  state->hand[currentPlayer][i] = temphand[i];
    #####: 1436:	  temphand[i] = -1;
        -: 1437:  }
        -: 1438:  
    #####: 1439:  return 0;
        -: 1440:}
        -: 1441:
        -: 1442://end of dominion.c
        -: 1443:
